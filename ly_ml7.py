# -*- coding: utf-8 -*-
"""LY - ML7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y72p8Hdp9c38Djp03coyT-nthuSN0PuL
"""

pip install openai wikipedia

import openai
import os
import wikipedia

"""# 1.) Set up OpenAI and the enviornment

"""

apikey = "apikey"

#openai.api_key = apikey

client = openai.OpenAI(
    api_key = apikey
)

"""# 2.) Use the wikipedia api to get a function that pulls in the text of a wikipedia page"""

dir(wikipedia)

page_titles = ["Artificial Intelligence", "UCLA"]

page_title = page_titles[0]

search_results = wikipedia.search(page_title)
search_results

page = wikipedia.page(search_results[0])

wikipedia.page(search_results[0])

# Look at the directory on page
dir(page)

# page.content: property that allows access to the HTML content of a web page, commonly used in web scraping or web automation tasks to extract specific information from a webpage.
def get_wikipedia_content(page_title):
  search_results = wikipedia.search(page_title)
  page = wikipedia.page(search_results[0])
  return(page.content)

content = get_wikipedia_content(page_title)

"""# 3.) Build a chatgpt bot that will analyze the text given and try to locate any false info"""

chat_completions = client.chat.completions.create(
    model = "gpt-4",
    messages = [
        {"role" : "system", "content" : "I will be giving you an article. I am looking for any false information. I want to capture all potentially false information, if there is even small potential for it to be wrong please return it. Please concisely list only the false information found. If there is no false information only return 'DONE'. "},
        {"role" : "user", "content" : content[:8180]}]
)

# Summary, not what we want - "You are asummary assistant at wikipedia, I will pass you an article and please tell me if any of the information is off" - so we change it with a better fotting one.
print(chat_completions.choices[0].message.content) # get the first choice and message and contents associated with that

# Tune the sensitivity of the information capture: By setting the sensitivity to a higher value, the function tries to capture all potentially false information, even if the potential for it to be wrong is really small.
# -"I want to capture all potentially false information, if there is even small potential for it to be wrong please return it.""
# This will result in more false positives.
# Gives us 5 instead of 1

def chatgpt_error_correction(text):
  chat_completions = client.chat.completions.create(
      model = "gpt-4",
      messages = [
        {"role" : "system", "content" : "I will be giving you an article. I am looking for any false information. I want to capture all potentially false information, if there is even small potential for it to be wrong please return it. Please concisely list only the false information found. If there is no false information only return 'DONE'. "},
        {"role" : "user", "content" : text[:8180]}]
)
  print(chat_completions.choices[0].message.content)

"""# 4.) Make a for loop and check a few wikipedia pages and return a report of any potentially false info via wikipedia"""

# prompt engineering - be as explicit as possible

page_titles = ["Artificial Intelligence", "UCLA", "Rain"]

for page_title in page_titles:
    try:
        print("_____________" + page_title)
        content = get_wikipedia_content(page_title)
        chatgpt_error_correction(content)
    except:
        print("ERROR")